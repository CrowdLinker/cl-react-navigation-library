<Navigator>
  -- defaultIndex passed to headers / tabs / stack / tabbar 
  -- computes activeIndex based on location 
  -- pass activeIndex to tabs/stack
  -- set basepath context, navigate, and state to children (link / screen)

  {({ state, index, navigate, back })}

  <Headers>
    -- renders matching index only
    -- provide default index?

    <Header>1</Header>
    <Header>2</Header>
    <Header>3</Header>
  </Headers>

  <Tabs / Stack>
    -- pager w/ screens 
    -- navigates to new location on gesture updates
    -- control mounting and visible screens based on activeIndex and props

    <Screen path='1' unmountOnExit lazy style={{ borderWidth: 1 }} />
      -- consumer components - control unmounting, mounting, and style
      -- receives active prop to indicate mounted state
      -- receives state, params, and navigate()

    <Screen path='2' /> 
    <Screen path='3' />
    
  </Tabs / Stack>

  <Tabbar>
    -- active tab highlighted 
    -- paths are mapped to screens based on order

    <Tab>1</Tab>
    <Tab>2</Tab>
    <Tab>3</Tab>
  </Tabbar>
</Navigator>

-- tabbar / header views for use
-- share pan value with tabbar / headers 
-- types on route components 
-- DOCS

-- persist state on navigators e.g tabs -- save last matching index and path?
-- react-native-screens
-- reduce consumers for navigation provider -- location and navigate is all we use?

dynamic routes: 
  cons:
  - cant compute initial index, need a weird workaround 
  - changes to screens will mess with navigator, messy updates to resolve 
  

  pros:
  - nicer api 
  - switching order of screens is easy and intuitive
  - screens have a direct correlation to their path (instead of assumed in a routes[] prop)

routes up top are easier to implement and will be less buggy
we can think about passing a fn to children via navigator to somehow make it work dynamically, but is it worth it?